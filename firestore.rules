/**
 * @fileOverview Firestore Security Rules for the Homecare application.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for patient-specific data,
 * ensuring that only authenticated users can access and modify information
 * related to a patient. Public read access is granted to the /supplies collection.
 *
 * Data Structure:
 * - /patients/{patientId}: Root for patient-specific data.
 * - /patients/{patientId}/inventories/{inventoryId}: Inventory records for a patient.
 * - /patients/{patientId}/supplyRequests/{supplyRequestId}: Supply requests for a patient.
 * - /patients/{patientId}/shiftReports/{shiftReportId}: Shift reports for a patient.
 * - /patients/{patientId}/notifications/{notificationId}: Notifications for a patient.
 * - /supplies/{supplyId}: Publicly accessible list of available supplies.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed to prevent unauthorized data access.
 * - The /supplies collection is read-only for all users, including unauthenticated ones.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *  - The rules assume each document nested under /patients/{patientId} has a "patientId"
 *    field that matches the {patientId} path segment. This allows for efficient
 *    authorization checks without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated (user is signed in).
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the patient data.
     * @param {string} patientId - The patient's unique ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(patientId) {
      return isSignedIn() && request.auth.uid == patientId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the patient data.
     *  Also validates that resource exists to prevent updating/deleting non-existent documents.
     * @param {string} patientId - The patient's unique ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(patientId) {
      return isOwner(patientId) && resource != null;
    }

    /**
     * @description Rules for the /patients/{patientId} collection.
     * @path /patients/{patientId}
     * @allow (create) Authenticated user creates a patient document where the patientId matches their UID.
     * @allow (get, update, delete) Authenticated user who is the owner of the patient data can read, update, and delete.
     * @deny (create) Unauthenticated user attempts to create a patient document.
     * @deny (update) Authenticated user attempts to update a patient document they don't own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /patients/{patientId} {
      allow get: if isOwner(patientId);
      allow list: if false; // No listing of users

      allow create: if isSignedIn() && request.auth.uid == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Rules for the /supplies/{supplyId} collection.
     * @path /supplies/{supplyId}
     * @allow (get, list) Any user can read the supply list.
     * @deny (create, update, delete) No user can create, update, or delete supplies.
     * @principle Provides public read access to supply information.
     */
    match /supplies/{supplyId} {
      allow get, list: if true; // Public read

      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /patients/{patientId}/inventories/{inventoryId} collection.
     * @path /patients/{patientId}/inventories/{inventoryId}
     * @allow (create) Authenticated user creates an inventory document for their patient.
     * @allow (get, list, update, delete) Authenticated user who is the owner of the patient data can read, update, and delete.
     * @deny (create) Unauthenticated user attempts to create an inventory document.
     * @deny (update) Authenticated user attempts to update an inventory document they don't own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /patients/{patientId}/inventories/{inventoryId} {
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);

      allow create: if isOwner(patientId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.patientId == resource.data.patientId;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Rules for the /patients/{patientId}/supplyRequests/{supplyRequestId} collection.
     * @path /patients/{patientId}/supplyRequests/{supplyRequestId}
     * @allow (create) Authenticated user creates a supply request document for their patient.
     * @allow (get, list, update, delete) Authenticated user who is the owner of the patient data can read, update, and delete.
     * @deny (create) Unauthenticated user attempts to create a supply request document.
     * @deny (update) Authenticated user attempts to update a supply request document they don't own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /patients/{patientId}/supplyRequests/{supplyRequestId} {
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);

      allow create: if isOwner(patientId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.patientId == resource.data.patientId;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Rules for the /patients/{patientId}/shiftReports/{shiftReportId} collection.
     * @path /patients/{patientId}/shiftReports/{shiftReportId}
     * @allow (create) Authenticated user creates a shift report document for their patient.
     * @allow (get, list, update, delete) Authenticated user who is the owner of the patient data can read, update, and delete.
     * @deny (create) Unauthenticated user attempts to create a shift report document.
     * @deny (update) Authenticated user attempts to update a shift report document they don't own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /patients/{patientId}/shiftReports/{shiftReportId} {
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);

      allow create: if isOwner(patientId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.patientId == resource.data.patientId;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Rules for the /patients/{patientId}/notifications/{notificationId} collection.
     * @path /patients/{patientId}/notifications/{notificationId}
     * @allow (create) Authenticated user creates a notification document for their patient.
     * @allow (get, list, update, delete) Authenticated user who is the owner of the patient data can read, update, and delete.
     * @deny (create) Unauthenticated user attempts to create a notification document.
     * @deny (update) Authenticated user attempts to update a notification document they don't own.
     */
    match /patients/{patientId}/notifications/{notificationId} {
        allow get: if isOwner(patientId);
        allow list: if isOwner(patientId);

        allow create: if isOwner(patientId) && request.resource.data.patientId == patientId;
        allow update: if isExistingOwner(patientId) && request.resource.data.patientId == resource.data.patientId;
        allow delete: if isExistingOwner(patientId);
    }
  }
}