/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for patient data,
 *              allowing only authenticated users access to patient-specific information.
 *              It leverages Firestore's hierarchical data structure to simplify authorization.
 *
 * Data Structure:
 * - /patients/{patientId}: Root document for patient data.
 * - /patients/{patientId}/inventories/{inventoryId}: Inventory records for the patient.
 * - /patients/{patientId}/supplyRequests/{supplyRequestId}: Supply requests for the patient.
 * - /patients/{patientId}/shiftReports/{shiftReportId}: Shift reports for the patient.
 * - /patients/{patientId}/whatsAppNotifications/{notificationId}: WhatsApp notifications for the patient.
 * - /supplies/{supplyId}: Publicly readable list of available supplies.
 *
 * Key Security Decisions:
 * - All patient-specific data is nested under /patients/{patientId}, enforcing owner-only access.
 * - Listing of supplies is public.
 * - No user listing is allowed.
 * - The rules explicitly deny any ambiguous or unhandled relationships to default to maximum security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of an existing document.
     * @details Ensures both that the user is the owner and that the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /patients/{patientId} collection.
     * @path /patients/{patientId}
     * @allow (create) User JQSiffizIgYpmVLq1Hsg3w8YPFJ3 can create a patient document if patientId == JQSiffizIgYpmVLq1Hsg3w8YPFJ3
     * @deny (create) User ABC cannot create a patient document if patientId != ABC
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId} {
      // Only the authenticated user who owns the patientId can read, update, or delete
      allow get: if isSignedIn();
      allow list: if false; // Listing patients is disallowed

      allow create: if isOwner(patientId) && request.resource.data.id == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Rules for the /supplies/{supplyId} collection.
     * @path /supplies/{supplyId}
     * @allow (get, list) Anyone can read the supplies
     * @deny (create, update, delete) Nobody can create, update or delete supplies
     * @principle Read-only access for all users, no write access.
     */
    match /supplies/{supplyId} {
      // Supplies are publicly readable but not writable
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /patients/{patientId}/inventories/{inventoryId} collection.
     * @path /patients/{patientId}/inventories/{inventoryId}
     * @allow (create) User JQSiffizIgYpmVLq1Hsg3w8YPFJ3 can create inventory if patientId == JQSiffizIgYpmVLq1Hsg3w8YPFJ3
     * @deny (create) User ABC cannot create inventory if patientId != ABC
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId}/inventories/{inventoryId} {
      // Only the owner of the patient can manage inventories
      allow get: if isSignedIn();
      allow list: if isOwner(patientId);

      allow create: if isOwner(patientId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.patientId == resource.data.patientId;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Rules for the /patients/{patientId}/supplyRequests/{supplyRequestId} collection.
     * @path /patients/{patientId}/supplyRequests/{supplyRequestId}
     * @allow (create) User JQSiffizIgYpmVLq1Hsg3w8YPFJ3 can create supply request if patientId == JQSiffizIgYpmVLq1Hsg3w8YPFJ3
     * @deny (create) User ABC cannot create supply request if patientId != ABC
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId}/supplyRequests/{supplyRequestId} {
      // Only the owner of the patient can manage supply requests
      allow get: if isSignedIn();
      allow list: if isOwner(patientId);

      allow create: if isOwner(patientId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.patientId == resource.data.patientId;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Rules for the /patients/{patientId}/shiftReports/{shiftReportId} collection.
     * @path /patients/{patientId}/shiftReports/{shiftReportId}
     * @allow (create) User JQSiffizIgYpmVLq1Hsg3w8YPFJ3 can create shift report if patientId == JQSiffizIgYpmVLq1Hsg3w8YPFJ3
     * @deny (create) User ABC cannot create shift report if patientId != ABC
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId}/shiftReports/{shiftReportId} {
      // Only the owner of the patient can manage shift reports
      allow get: if isSignedIn();
      allow list: if isOwner(patientId);

      allow create: if isOwner(patientId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.patientId == resource.data.patientId;
      allow delete: if isExistingOwner(patientId);
    }

     /**
     * @description Rules for the /patients/{patientId}/whatsAppNotifications/{notificationId} collection.
     * @path /patients/{patientId}/whatsAppNotifications/{notificationId}
     * @allow (list) User JQSiffizIgYpmVLq1Hsg3w8YPFJ3 can list notifications if patientId == JQSiffizIgYpmVLq1Hsg3w8YPFJ3
     * @deny (list) User ABC cannot list notifications if patientId != ABC
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId}/whatsAppNotifications/{notificationId} {
      // Only the owner of the patient can manage WhatsApp notifications
      allow get: if isSignedIn();
      allow list: if isOwner(patientId);

      allow create: if isOwner(patientId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.patientId == resource.data.patientId;
      allow delete: if isExistingOwner(patientId);
    }
  }
}