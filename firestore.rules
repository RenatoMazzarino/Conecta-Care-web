/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for patient data,
 *              allowing authenticated users (care team members or family contacts) to
 *              access information related to a specific patient.
 *
 * @dataStructure
 *   /patients/{patientId}: Root document for patient-specific data.
 *   /patients/{patientId}/inventories/{inventoryId}: Inventory levels for supplies used by the patient.
 *   /patients/{patientId}/supplyRequests/{supplyRequestId}: Requests for supplies made for the patient.
 *   /patients/{patientId}/shiftReports/{shiftReportId}: Shift reports submitted for the patient.
 *   /patients/{patientId}/whatsAppNotifications/{notificationId}: WhatsApp notifications related to the patient.
 *   /supplies/{supplyId}: Catalog of available supplies (publicly readable).
 *
 * @keySecurityDecisions
 *   - Authenticated users can read and write patient data.
 *   - The 'supplies' collection is publicly readable but not writable (supply catalog).
 *   - `list` operations are restricted to authenticated users for patient subcollections.
 *
 * @denormalizationForAuthorization
 *   None: Not needed for a single patient app.
 *
 * @structuralSegregation
 *   Patient-specific data is segregated under /patients/{patientId}, while the 'supplies'
 *   collection is public and separate.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read and write patient data.
     * @path /patients/{patientId}
     * @allow (create) request.auth.uid exists
     * @allow (update) request.auth.uid exists
     * @allow (delete) request.auth.uid exists && resource != null
     * @allow (get) request.auth.uid exists
     * @allow (list) request.auth.uid exists
     * @deny (create) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null || resource == null
     * @deny (get) request.auth == null
     * @deny (list) request.auth == null
     * @principle Enforces authentication for all patient data access.
     */
    match /patients/{patientId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to the supplies catalog.
     *              Writes are disabled.
     * @path /supplies/{supplyId}
     * @allow (get) true
     * @allow (list) true
     * @deny (create) false
     * @deny (update) false
     * @deny (delete) false
     * @principle Allows open reads for the supplies catalog.
     */
    match /supplies/{supplyId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows authenticated users to manage patient-specific inventory.
     * @path /patients/{patientId}/inventories/{inventoryId}
     * @allow (create) request.auth.uid exists
     * @allow (update) request.auth.uid exists
     * @allow (delete) request.auth.uid exists && resource != null
     * @allow (get) request.auth.uid exists
     * @allow (list) request.auth.uid exists
     * @deny (create) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null || resource == null
     * @deny (get) request.auth == null
     * @deny (list) request.auth == null
     * @principle Enforces authentication for inventory management.
     */
    match /patients/{patientId}/inventories/{inventoryId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows authenticated users to manage patient-specific supply requests.
     * @path /patients/{patientId}/supplyRequests/{supplyRequestId}
     * @allow (create) request.auth.uid exists
     * @allow (update) request.auth.uid exists
     * @allow (delete) request.auth.uid exists && resource != null
     * @allow (get) request.auth.uid exists
     * @allow (list) request.auth.uid exists
     * @deny (create) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null || resource == null
     * @deny (get) request.auth == null
     * @deny (list) request.auth == null
     * @principle Enforces authentication for supply request management.
     */
    match /patients/{patientId}/supplyRequests/{supplyRequestId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows authenticated users to manage patient-specific shift reports.
     * @path /patients/{patientId}/shiftReports/{shiftReportId}
     * @allow (create) request.auth.uid exists
     * @allow (update) request.auth.uid exists
     * @allow (delete) request.auth.uid exists && resource != null
     * @allow (get) request.auth.uid exists
     * @allow (list) request.auth.uid exists
     * @deny (create) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null || resource == null
     * @deny (get) request.auth == null
     * @deny (list) request.auth == null
     * @principle Enforces authentication for shift report management.
     */
    match /patients/{patientId}/shiftReports/{shiftReportId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows authenticated users to manage patient-specific WhatsApp notifications.
     * @path /patients/{patientId}/whatsAppNotifications/{notificationId}
     * @allow (create) request.auth.uid exists
     * @allow (update) request.auth.uid exists
     * @allow (delete) request.auth.uid exists && resource != null
     * @allow (get) request.auth.uid exists
     * @allow (list) request.auth.uid exists
     * @deny (create) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null || resource == null
     * @deny (get) request.auth == null
     * @deny (list) request.auth == null
     * @principle Enforces authentication for WhatsApp notification management.
     */
    match /patients/{patientId}/whatsAppNotifications/{notificationId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}