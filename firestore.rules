/**
 * @file Firebase Security Rules for Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for patient and professional data.
 * Patients and professionals can only create, read, update, and delete their own records.
 * All data is nested under top-level collections: `/patients/{patientId}` and `/professionals/{professionalId}`.
 * Subcollections under `/patients/{patientId}` (inventories, supplyRequests, shiftReports, notifications) inherit the same ownership constraints.
 * Shift data is globally accessible, but restricted to authenticated users.
 *
 * Data Structure:
 * - `/patients/{patientId}`: Patient records, keyed by patient ID.
 * - `/professionals/{professionalId}`: Professional records, keyed by professional ID.
 * - `/shifts/{shiftId}`: Shift records, keyed by shift ID (composite key: `{patientId}-{dayKey}-{shiftType}`).
 * - `/patients/{patientId}/inventories/{inventoryId}`: Inventory records for a specific patient.
 * - `/patients/{patientId}/supplyRequests/{supplyRequestId}`: Supply requests for a patient.
 * - `/patients/{patientId}/shiftReports/{shiftReportId}`: Shift reports for a patient.
 * - `/patients/{patientId}/notifications/{notificationId}`: Notifications for a patient.
 *
 * Key Security Decisions:
 * - Patients and professionals can only manage their own data.
 * - Listing of all patient or professional records is disallowed to prevent unauthorized data access.
 * - Shift data is read-only for authenticated users.
 *
 * Denormalization for Authorization:
 *  - The `id` field within the `Patient` and `Professional` documents are used as a source of truth for ownership,
 *    and are validated against the document ID in the path.
 *  - Subcollections inherit patient ownership from their parent document's ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects patient records. Patients can only manage their own records.
     * @path /patients/{patientId}
     * @allow (create) - A patient with UID 'user123' can create a document at /patients/user123.
     * @allow (get) - A patient with UID 'user123' can read their document at /patients/user123.
     * @allow (update) - A patient with UID 'user123' can update their document at /patients/user123.
     * @allow (delete) - A patient with UID 'user123' can delete their document at /patients/user123.
     * @deny (create) - A patient with UID 'user123' cannot create a document at /patients/user456.
     * @deny (get) - A patient with UID 'user123' cannot read the document at /patients/user456.
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(patientId) && request.resource.data.id == patientId;
      allow update: if isSignedIn() && isExistingOwner(patientId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Protects professional records. Professionals can only manage their own records.
     * @path /professionals/{professionalId}
     * @allow (create) - A professional with UID 'user123' can create a document at /professionals/user123.
     * @allow (get) - A professional with UID 'user123' can read their document at /professionals/user123.
     * @allow (update) - A professional with UID 'user123' can update their document at /professionals/user123.
     * @allow (delete) - A professional with UID 'user123' can delete their document at /professionals/user123.
     * @deny (create) - A professional with UID 'user123' cannot create a document at /professionals/user456.
     * @deny (get) - A professional with UID 'user123' cannot read the document at /professionals/user456.
     * @principle Enforces document ownership for writes.
     */
    match /professionals/{professionalId} {
      allow get: if isSignedIn() && isOwner(professionalId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(professionalId) && request.resource.data.id == professionalId;
      allow update: if isSignedIn() && isExistingOwner(professionalId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(professionalId);
    }

    /**
     * @description Allows any authenticated user to read shift data, but restricts writes.
     * @path /shifts/{shiftId}
     * @allow (get) - Any signed-in user can read shift data.
     * @deny (create) - No one can create shift records through the client.
     * @principle Allows public read access for authenticated users, but prevents unauthorized writes.
     */
    match /shifts/{shiftId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects inventory records for a specific patient. Only the patient can manage their own inventory.
     * @path /patients/{patientId}/inventories/{inventoryId}
     * @allow (create) - A patient with UID 'user123' can create an inventory record under /patients/user123/inventories/inventory1.
     * @allow (get) - A patient with UID 'user123' can read their inventory record under /patients/user123/inventories/inventory1.
     * @allow (update) - A patient with UID 'user123' can update their inventory record under /patients/user123/inventories/inventory1.
     * @allow (delete) - A patient with UID 'user123' can delete their inventory record under /patients/user123/inventories/inventory1.
     * @deny (create) - A patient with UID 'user123' cannot create an inventory record under /patients/user456/inventories/inventory1.
     * @deny (get) - A patient with UID 'user123' cannot read the inventory record under /patients/user456/inventories/inventory1.
     * @principle Enforces document ownership for writes, inheriting from the parent patient document.
     */
    match /patients/{patientId}/inventories/{inventoryId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId) ;
      allow update: if isSignedIn() && isExistingOwner(patientId);
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Protects supply requests for a specific patient. Only the patient can manage their own supply requests.
     * @path /patients/{patientId}/supplyRequests/{supplyRequestId}
     * @allow (create) - A patient with UID 'user123' can create a supply request under /patients/user123/supplyRequests/request1.
     * @allow (get) - A patient with UID 'user123' can read their supply request under /patients/user123/supplyRequests/request1.
     * @allow (update) - A patient with UID 'user123' can update their supply request under /patients/user123/supplyRequests/request1.
     * @allow (delete) - A patient with UID 'user123' can delete their supply request under /patients/user123/supplyRequests/request1.
     * @deny (create) - A patient with UID 'user123' cannot create a supply request under /patients/user456/supplyRequests/request1.
     * @deny (get) - A patient with UID 'user123' cannot read the supply request under /patients/user456/supplyRequests/request1.
     * @principle Enforces document ownership for writes, inheriting from the parent patient document.
     */
    match /patients/{patientId}/supplyRequests/{supplyRequestId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId);
      allow update: if isSignedIn() && isExistingOwner(patientId);
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Protects shift reports for a specific patient. Only the patient can manage their own shift reports.
     * @path /patients/{patientId}/shiftReports/{shiftReportId}
     * @allow (create) - A patient with UID 'user123' can create a shift report under /patients/user123/shiftReports/report1.
     * @allow (get) - A patient with UID 'user123' can read their shift report under /patients/user123/shiftReports/report1.
     * @allow (update) - A patient with UID 'user123' can update their shift report under /patients/user123/shiftReports/report1.
     * @allow (delete) - A patient with UID 'user123' can delete their shift report under /patients/user123/shiftReports/report1.
     * @deny (create) - A patient with UID 'user123' cannot create a shift report under /patients/user456/shiftReports/report1.
     * @deny (get) - A patient with UID 'user123' cannot read the shift report under /patients/user456/shiftReports/report1.
     * @principle Enforces document ownership for writes, inheriting from the parent patient document.
     */
    match /patients/{patientId}/shiftReports/{shiftReportId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId);
      allow update: if isSignedIn() && isExistingOwner(patientId);
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Protects notifications for a specific patient. Only the patient can manage their own notifications.
     * @path /patients/{patientId}/notifications/{notificationId}
     * @allow (create) - A patient with UID 'user123' can create a notification under /patients/user123/notifications/notification1.
     * @allow (get) - A patient with UID 'user123' can read their notification under /patients/user123/notifications/notification1.
     * @allow (update) - A patient with UID 'user123' can update their notification under /patients/user123/notifications/notification1.
     * @allow (delete) - A patient with UID 'user123' can delete their notification under /patients/user123/notifications/notification1.
     * @deny (create) - A patient with UID 'user123' cannot create a notification under /patients/user456/notifications/notification1.
     * @deny (get) - A patient with UID 'user123' cannot read the notification under /patients/user456/notifications/notification1.
     * @principle Enforces document ownership for writes, inheriting from the parent patient document.
     */
    match /patients/{patientId}/notifications/{notificationId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId);
      allow update: if isSignedIn() && isExistingOwner(patientId);
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}