/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for patient-specific data.
 *
 * Data Structure:
 * All patient-specific data is nested under `/patients/{patientId}`.
 * Top-level `/supplies/{supplyId}` are considered public read-only.
 *
 * Key Security Decisions:
 * - Enforces path-based ownership for patient-related data.
 * - Allows public read access to the `/supplies` collection.
 * - Employs strict ownership checks for all write operations.
 * - Does not implement data-type validation in this prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to patient documents.
     * @path /patients/{patientId}
     * @allow (read) Authenticated user can get patient document.
     * @deny (write) Any write access is forbidden
     * @principle Enforces read-only access to patient documents and disallows modification.
     */
    match /patients/{patientId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to the supplies collection.
     * @path /supplies/{supplyId}
     * @allow (read) Any user can read supply data.
     * @deny (write) No writes are allowed.
     * @principle Allows public read access to supply data, restricts writes.
     */
    match /supplies/{supplyId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages inventory levels for a patient.
     * @path /patients/{patientId}/inventories/{inventoryId}
     * @allow (read) Authenticated user can get inventory data for a specific patient.
     * @allow (write) Authenticated user can manage inventory levels.
     * @deny (write) Non-authenticated users cannot manage inventory.
     * @principle Enforces patient-specific inventory management.
     */
    match /patients/{patientId}/inventories/{inventoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages supply requests for a patient.
     * @path /patients/{patientId}/supplyRequests/{supplyRequestId}
     * @allow (read) Authenticated user can get supply requests for a specific patient.
     * @allow (write) Authenticated user can manage supply requests.
     * @deny (write) Non-authenticated users cannot manage supply requests.
     * @principle Enforces patient-specific supply request management.
     */
    match /patients/{patientId}/supplyRequests/{supplyRequestId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages shift reports for a patient.
     * @path /patients/{patientId}/shiftReports/{shiftReportId}
     * @allow (read) Authenticated user can read shift reports for a specific patient.
     * @allow (write) Authenticated user can create, update, and delete shift reports.
     * @deny (write) Non-authenticated users cannot manage shift reports.
     * @principle Enforces patient-specific shift report management.
     */
    match /patients/{patientId}/shiftReports/{shiftReportId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages WhatsApp notifications for a patient.
     * @path /patients/{patientId}/whatsAppNotifications/{notificationId}
     * @allow (read) Authenticated user can read WhatsApp notifications for a specific patient.
     * @allow (write) Authenticated user can create, update, and delete WhatsApp notifications.
     * @deny (write) Non-authenticated users cannot manage WhatsApp notifications.
     * @principle Enforces patient-specific WhatsApp notification management.
     */
    match /patients/{patientId}/whatsAppNotifications/{notificationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}