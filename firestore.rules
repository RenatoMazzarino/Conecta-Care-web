/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset provides basic authentication and authorization for the Homecare application.
 *
 * Core Philosophy:
 * The rules are designed to allow all authenticated users to read all data but restricts write access.
 * A specific user (defined as the 'admin' user) is granted full read/write access.
 *
 * Data Structure:
 * - /patients/{patientId}: Stores patient records.
 * - /professionals/{professionalId}: Stores professional records.
 * - /shifts/{shiftId}: Stores shift records.
 * - /patients/{patientId}/inventories/{inventoryId}: Stores inventory data for patients.
 * - /patients/{patientId}/supplyRequests/{supplyRequestId}: Stores supply requests for patients.
 * - /patients/{patientId}/shiftReports/{shiftReportId}: Stores shift reports for patients.
 * - /patients/{patientId}/notifications/{notificationId}: Stores notifications for patients.
 *
 * Key Security Decisions:
 * - Authenticated users can read any data.
 * - Only the admin user (defined in the `isAdmin()` function) can create, update, or delete data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the admin user.
     * @return {boolean} True if the user is the admin, false otherwise.
     */
    function isAdmin() {
      return request.auth.uid == 'REPLACE_WITH_ADMIN_USER_ID';
    }

    /**
     * @description Rules for the /patients collection.
     * @path /patients/{patientId}
     * @allow (read) Authenticated user can read patient data.
     * @deny (create, update, delete) Non-admin user cannot write patient data.
     * @principle Allows read all to signed-in users, restricts writes to a single admin user.
     */
    match /patients/{patientId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /professionals collection.
     * @path /professionals/{professionalId}
     * @allow (read) Authenticated user can read professional data.
     * @deny (create, update, delete) Non-admin user cannot write professional data.
     * @principle Allows read all to signed-in users, restricts writes to a single admin user.
     */
    match /professionals/{professionalId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /shifts collection.
     * @path /shifts/{shiftId}
     * @allow (read) Authenticated user can read shift data.
     * @deny (create, update, delete) Non-admin user cannot write shift data.
     * @principle Allows read all to signed-in users, restricts writes to a single admin user.
     */
    match /shifts/{shiftId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /patients/{patientId}/inventories collection.
     * @path /patients/{patientId}/inventories/{inventoryId}
     * @allow (read) Authenticated user can read inventory data.
     * @deny (create, update, delete) Non-admin user cannot write inventory data.
     * @principle Allows read all to signed-in users, restricts writes to a single admin user.
     */
    match /patients/{patientId}/inventories/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /patients/{patientId}/supplyRequests collection.
     * @path /patients/{patientId}/supplyRequests/{supplyRequestId}
     * @allow (read) Authenticated user can read supply request data.
     * @deny (create, update, delete) Non-admin user cannot write supply request data.
     * @principle Allows read all to signed-in users, restricts writes to a single admin user.
     */
    match /patients/{patientId}/supplyRequests/{supplyRequestId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /patients/{patientId}/shiftReports collection.
     * @path /patients/{patientId}/shiftReports/{shiftReportId}
     * @allow (read) Authenticated user can read shift report data.
     * @deny (create, update, delete) Non-admin user cannot write shift report data.
     * @principle Allows read all to signed-in users, restricts writes to a single admin user.
     */
    match /patients/{patientId}/shiftReports/{shiftReportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /patients/{patientId}/notifications collection.
     * @path /patients/{patientId}/notifications/{notificationId}
     * @allow (read) Authenticated user can read notification data.
     * @deny (create, update, delete) Non-admin user cannot write notification data.
     * @principle Allows read all to signed-in users, restricts writes to a single admin user.
     */
    match /patients/{patientId}/notifications/{notificationId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
  }
}