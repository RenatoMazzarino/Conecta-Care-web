/**
 * @fileoverview Firestore Security Rules for the Homecare application.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for patient-specific data,
 * ensuring that only authenticated users can access and modify information
 * related to a specific patient. Public read access is granted for the 'supplies' collection.
 *
 * Data Structure:
 * - /patients/{patientId}: Root document containing core patient information.
 * - /patients/{patientId}/inventories/{inventoryId}: Inventory levels for each patient.
 * - /patients/{patientId}/supplyRequests/{supplyRequestId}: Supply requests made for the patient.
 * - /patients/{patientId}/shiftReports/{shiftReportId}: Shift reports submitted for the patient.
 * - /patients/{patientId}/notifications/{notificationId}: Notifications for the patient.
 * - /supplies/{supplyId}: Publicly accessible list of available supplies.
 *
 * Key Security Decisions:
 * - Patients and their nested data (inventories, supplyRequests, shiftReports) are strictly
 *   controlled by patient ID, ensuring data isolation.
 * - The 'supplies' collection is publicly readable, as it represents a catalog of available items.
 * - The rules explicitly deny any listing of the 'patients' collection to prevent unauthorized
 *   enumeration of patient IDs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the patient documents, ensuring only authenticated users can read patient data.
     * @path /patients/{patientId}
     * @allow (get) Authenticated user can read a specific patient if they match the patientId.
     * @deny (get) If the user is not authenticated.
     * @allow (create) Not allowed. Patients are not created directly through the client.
     * @allow (update) Not allowed. Patients are not updated directly through the client.
     * @allow (delete) Not allowed. Patients are not deleted directly through the client.
     * @principle Enforces document ownership for reads; denies all writes directly to the /patients collection.
     */
    match /patients/{patientId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the supplies collection.
     * @path /supplies/{supplyId}
     * @allow (get, list) Any user can read the supply information.
     * @deny (create, update, delete) No user can create, update, or delete supplies.
     * @principle Provides public read access to supply information while restricting write access.
     */
    match /supplies/{supplyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the inventory subcollection under a specific patient.
     * @path /patients/{patientId}/inventories/{inventoryId}
     * @allow (get, list) Authenticated user can read the inventory if they match the patientId.
     * @deny (get, list) If the user is not authenticated or does not match the patientId.
     * @allow (create) Not allowed.
     * @allow (update) Not allowed.
     * @allow (delete) Not allowed.
     * @principle Enforces document ownership for reads; denies all writes.
     */
    match /patients/{patientId}/inventories/{inventoryId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the supply requests subcollection under a specific patient.
     * @path /patients/{patientId}/supplyRequests/{supplyRequestId}
     * @allow (get, list) Authenticated user can read the supply request if they match the patientId.
     * @deny (get, list) If the user is not authenticated or does not match the patientId.
     * @allow (create) Not allowed.
     * @allow (update) Not allowed.
     * @allow (delete) Not allowed.
     * @principle Enforces document ownership for reads; denies all writes.
     */
    match /patients/{patientId}/supplyRequests/{supplyRequestId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the shift reports subcollection under a specific patient.
     * @path /patients/{patientId}/shiftReports/{shiftReportId}
     * @allow (get, list) Authenticated user can read the shift report if they match the patientId.
     * @deny (get, list) If the user is not authenticated or does not match the patientId.
     * @allow (create) Not allowed.
     * @allow (update) Not allowed.
     * @allow (delete) Not allowed.
     * @principle Enforces document ownership for reads; denies all writes.
     */
    match /patients/{patientId}/shiftReports/{shiftReportId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the notifications subcollection under a specific patient.
     * @path /patients/{patientId}/notifications/{notificationId}
     * @allow (get, list) Authenticated user can read the notification if they match the patientId.
     * @deny (get, list) If the user is not authenticated or does not match the patientId.
     * @allow (create) Not allowed.
     * @allow (update) Not allowed.
     * @allow (delete) Not allowed.
     * @principle Enforces document ownership for reads; denies all writes.
     */
    match /patients/{patientId}/notifications/{notificationId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create, update, delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(patientId) {
    return request.auth.uid == patientId;
  }
}